[{"id":0,"href":"/getting-started/","title":"Getting Started with ACME","section":"ACME and the WebPKI","content":" Getting Started with ACME # Free Publicly Trusted ACME CAs # Which one to chose? Depends on ubiquity, (quota) limits, IP support, etc. internationalized domain names support, challenge types\nhttps://acmeclients.com/certificate-authorities/\nGoogle Trust Services # Require EAB\nsupports DNS account 01 -ish\npunycode (?)\nLet\u0026rsquo;s Encrypt # ACME Clients # See https://letsencrypt.org/docs/client-options/ and https://acmeclients.com/.\nDO NOT SUBMIT Provide guidance to choose.\nFeatures, in particular EAB, ARI, challenge types, and binding with DNS providers for example operating system popularity / still maintained Best Practices # don\u0026rsquo;t pin don\u0026rsquo;t set notBefore in the request respect 429 retry-later "},{"id":1,"href":"/acme/","title":"The ACME Protocol","section":"ACME and the WebPKI","content":" What is ACME ? # Automatic Certificate Management Environment (ACME) is a standardized (RFC 8555) communication protocol to automate the process of obtaining and renewing digital certificates, and automate the process of proving domain control, which is a prerequisite for obtaining publicly trusted X.509 TLS certificates for web servers.\nWhy use ACME ? # Because it makes HTTPS easy and automatic. ACME enables you to quickly and easily get TLS web server (serverAuth) certificates for your HTTPS websites. ACME eliminates manual hassle and the risk of expired certificates!\nHow much does ACME cost ? # ACME is a standardized protocol, so it cannot \u0026ldquo;cost\u0026rdquo; anything.\nSome publicly trusted ACME CAs (Certificate Authorities) such as Google Trust Services and Let\u0026rsquo;s Encrypt provide TLS web server certificates for free. Their free Domain Validated (DV) TLS web server certificates provide the same security as paid certificates.\nThey offer free certificates to build a reliable, secure, and privacy-respecting Internet for everyone.\nWhy do some CAs charge money for TLS web server certificates ? # This answer is only about publicly trusted TLS web server certificates. It does not apply to private CAs nor other types of certificates like document/code signing or client authentication certificates.\nShort answer: Because people who do not know better are still willing to pay for TLS web server certificates.\nLong answer: Running a CA is expensive. It requires many roles (developers, site reliability engineers, security/compliance officers, support personnel, etc.), a reliable infrastructure and specialized hardware, as well as regular audits performed by third party firms.\nIn addition, paying for services related to TLS web server certificates, such as 24/7 support, higher quota limits, or access to monitoring/visualization dashboards, is fair and justified.\nSome CAs offer, and charge for, OV (Organization Validated), EV (Extended Validation), or QWAC (Qualified Website Authentication Certificate) certificates. Unlike DV (Domain Validated) certificates, which can be issued within seconds in a fully automated manner thanks to ACME, OV, EV, and QWAC certificates require additional validations, which are generally performed manually by \u0026ldquo;Validation Specialists\u0026rdquo;. These additional manual validations justify the extra costs for OV, EV, and QWAC certificates.\nOV, EV, and QWAC certificates are not more secure than DV certificates. They use the same technology and cryptographic algorithms as DV certificates. Some regulatory frameworks may require the use of OV, EV, or QWAC certificates in certain industries, but if you don\u0026rsquo;t have to comply with such regulations, just use free DV certificates. OV, EV, and QWAC certificates include additional fields and attributes, such as the name, locality, or even the VAT number of the entity that requested the certificate. Even if this additional information was thoroughly validated by the CA, web browsers ignore it. Thus, there is no point in paying extra money for OV, EV, or QWAC certificates.\nHTTPS doesn\u0026rsquo;t guarantee that a site is secure or that the entity that operates it is trustworthy. As noted in this Chromium blog post, HTTPS only guarantees that you are connecting to the site you intended to and that the connection is secure (not the site!). Even if this is less than you expected, these are extremely important guarantees that underpin the Internet\u0026rsquo;s security.\nFinally, some CAs charge additional fees to include additional subdomains, domain names, or wildcard domain names in certificates. This is not worth paying for DV certificates automatically issued using ACME. Don\u0026rsquo;t fall for it. Use free DV certificates instead.\n"},{"id":2,"href":"/webpki/","title":"The WebPKI","section":"ACME and the WebPKI","content":" The WebPKI # The WebPKI (Web Public Key Infrastructure) is the system of digital certificates, CAs (Certificate Authorities), web browsers, and other entities that enable secure communication and authentication on the Internet, primarily through HTTPS.\nThe WebPKI was originally focussed on TLS web servers authentication and encryption via HTTPS, but the term is increasingly being used to encompass other use cases, such as code signing or email protection. All of these use cases rely on the same principles of public-key cryptography and trusted CAs, ensuring secure communication and authentication in various digital contexts.\nOn this website, the term \u0026ldquo;WebPKI\u0026rdquo; refers to its original meaning only. Email protection, code signing, and other use cases are not addressed.\nWhat is a Publicly Trusted CA ? # The WebPKI enables clients and servers to establish trustworthy secure communication channels without knowing anything about each other nor having shared any information beforehand.\nThis system works thanks to CAs, which are third party entities that clients trust. Clients trust that CAs are perform the necessary validations before issuing certificates that attest that websites is who they claim to be.\nPublicly trusted CAs are trusted by all major clients by default. In practice, a CA is considered publicly trusted if it trusted by Chrome (Google), Mozilla (Firefox), Apple, and Microsoft, which all run a so-called \u0026ldquo;Root Program\u0026rdquo;. Linux distributions do not run Root Programs, most of them simply trust the same CAs as Firefox.\nCAs who want to be trusted by these Root Programs must comply with all their requirements (linked below). The CAs must provide evidence to third party auditing firms, who issue yearly reports attesting that the audited CA complies with all requirements. When necessary, Root Programs may also request additional evidence.\nChrome Root Store Policy Mozilla Root Store Policy Apple Root Store Policy Microsoft Root Store Policy All Root Programs, and publicly trusted CAs are part of the CA/B Forum (Certificate Authorities and Browsers Forum). This forum maintains a common set of requirements, called the BRs (Baseline Requirements) that all participating CAs must comply with. All these requirements are based on the WebTrust framework.\nTrust is hard-earned, easily lost, and difficult to reestablish. The whole system relies on openness, transparency, and consequences. For example, CAs must disclose their practices in so-called \u0026ldquo;Certification Practice Statement\u0026rdquo; documents published to their websites, and they must self-report all identified compliance violations.\nThe system is also forgiving. Mistakes can happen. What matters is how they are handled, and what safeguards are put in place to ensure they never happen again. All disclosed CA incidents are publicly visible at https://wiki.mozilla.org/CA/Incident_Dashboard.\nWhen necessary, Root Programs may decide to stop trusting CAs, like it happened to Entrust in 2024.\n"},{"id":3,"href":"/webpki/cert/","title":"Anatomy of a Certificate","section":"The WebPKI","content":" Analogy with the Physical World # Digital certificates are like identification documents (passport, identity card, driver license, employee badge, library membership card, retail store fidelity card, etc.), but for websites. They tie a name to an identity, they hold additional metadata, they are issued by some (more or less widely recognized/trusted) entity, and they can be used/accepted in specific circumstances.\nDigital certificates are issued by CAs (Certificate - or Certification - Authorities). CAs can either be public or private. Certificates issued by publicly trusted CAs are trusted/accepted by default by major web browsers and operating systems (like government-issued passports). Certificate issued by private CAs are only trusted/accepted by clients who agreed to trust them (like retail store fidelity cards).\nIn the same way that an identification document attests that a person has the given name, a digital certificate attests that a public key (and its corresponding private key) is bound to given domain names or IP addresses.\nWhen clients connect to a website via HTTPS, the server present its certificate. The client verifies that the certificate contains the domain name it is connecting to, and that it was issued by a CA it trusts. The server also sends a message signed using its private key. The client can then verify the signature using the public key from the certificate. The assumptions are that:\nThe private key to sign the message (which is tied to the public key in the certificate) is only known to the server serving the specific domain. The CA did their due diligence when issuing the certificate to verify that the requester controls the included domain names. It is worth pointing out that certificates issued by private CAs are not inherently less secure than certificates issued by publicly trusted CAs. Both use the same underlying technology and cryptographic algorithms.\nPrivate CAs may perform less rigorous validations, and their private keys may have fewer protections, like the library membership or retail store fidelity cards. But it is totally feasible to operate private CAs in a very secure manner, like it is done with employee badges.\nAnatomy of a Certificate # The format of X.509 digital certificates is detailed in RFC 5280. A certificate is made of a sequence of 3 fields:\nThe tbsCertificate is the data structure representing the certificate to be signed (tbs). The signatureAlgorithm identifies/defines how the signatureValue is computed. The signatureValue is the digital signature computed upon the tbsCertificate using signatureAlgorithm. This section only covers the tbsCertificate data structure of publicly trusted DV (Domain Validated) TLS web server leaf/end-entity certificates.\nClick here to view the example certificate being dissected. We are only going to look at the content of the Data: field, which corresponds to the tbsCertificate.\nCertificate: Data: Version: 3 (0x2) Serial Number: 02:71:83:d4:a8:25:79:07:0a:3d:8f:60:9e:27:cd:e5 Signature Algorithm: ecdsa-with-SHA256 Issuer: C = US, O = Google Trust Services, CN = WE2 Validity Not Before: Mar 31 08:56:27 2025 GMT Not After : Jun 23 08:56:26 2025 GMT Subject: CN = www.google.com Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:11:e3:07:97:e4:71:0c:5f:61:38:c3:56:6b:cc: e0:9a:6b:e1:18:63:2f:e9:87:e3:2c:a4:f2:54:ef: a1:d5:fd:06:c1:70:4c:cc:1b:69:9d:c0:1f:ba:cf: 7f:d3:ef:ea:cd:ef:33:d0:81:19:67:30:0e:45:59: 6c:35:d2:e0:d4 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Digital Signature X509v3 Extended Key Usage: TLS Web Server Authentication X509v3 Basic Constraints: critical CA:FALSE X509v3 Subject Key Identifier: DC:A3:F6:5E:4C:F2:71:46:51:A4:50:98:91:8B:FC:20:EF:29:70:45 X509v3 Authority Key Identifier: 75:BE:C4:77:AE:89:F6:44:37:7D:CF:B1:68:1F:1D:1A:EB:DC:34:59 Authority Information Access: OCSP - URI:http://o.pki.goog/we2 CA Issuers - URI:http://i.pki.goog/we2.crt X509v3 Subject Alternative Name: DNS:www.google.com X509v3 Certificate Policies: Policy: 2.23.140.1.2.1 X509v3 CRL Distribution Points: Full Name: URI:http://c.pki.goog/we2/xuzt3PU9F_w.crl CT Precertificate SCTs: Signed Certificate Timestamp: Version : v1 (0x0) Log ID : CF:11:56:EE:D5:2E:7C:AF:F3:87:5B:D9:69:2E:9B:E9: 1A:71:67:4A:B0:17:EC:AC:01:D2:5B:77:CE:CC:3B:08 Timestamp : Mar 31 09:56:28.830 2025 GMT Extensions: none Signature : ecdsa-with-SHA256 30:45:02:21:00:C7:F7:8F:00:6E:B4:79:C5:9C:7A:35: 69:4C:7D:7B:E1:1B:36:C8:0F:D9:6C:C2:63:28:4C:DE: 8F:47:D7:72:74:02:20:20:2D:9B:F5:90:5B:74:A6:8D: 3B:B6:99:65:3A:F9:3F:2C:0C:F1:F1:1B:4E:F6:5D:C8: 0C:7C:6C:D2:AE:C0:5D Signed Certificate Timestamp: Version : v1 (0x0) Log ID : A2:E3:0A:E4:45:EF:BD:AD:9B:7E:38:ED:47:67:77:53: D7:82:5B:84:94:D7:2B:5E:1B:2C:C4:B9:50:A4:47:E7 Timestamp : Mar 31 09:56:29.795 2025 GMT Extensions: none Signature : ecdsa-with-SHA256 30:46:02:21:00:8B:BB:DB:F5:A1:0F:EF:2D:CA:E0:57: 63:22:7B:B2:A5:21:4D:7B:AE:AE:CE:0C:2C:92:2A:0D: C4:F6:63:A5:12:02:21:00:D0:39:B3:EF:C0:29:FA:03: DB:9D:48:49:F9:48:9F:C5:1F:23:43:6B:41:5F:B2:76: EF:07:C7:EA:C6:DF:97:76 Signature Algorithm: ecdsa-with-SHA256 Signature Value: 30:44:02:20:64:e4:a1:aa:cf:67:8d:77:b3:e5:67:a7:fd:bb: aa:65:62:99:b1:7c:39:ec:13:e2:75:2a:23:1d:42:79:22:1a: 02:20:24:5d:e6:e0:84:18:0a:73:47:9b:06:e7:4e:80:9d:5b: 30:ac:f2:9d:32:d8:97:1f:b4:6a:74:e1:a2:c5:b5:ee -----BEGIN CERTIFICATE----- MIIDlTCCAzygAwIBAgIQAnGD1KgleQcKPY9gnifN5TAKBggqhkjOPQQDAjA7MQsw CQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMQwwCgYD VQQDEwNXRTIwHhcNMjUwMzMxMDg1NjI3WhcNMjUwNjIzMDg1NjI2WjAZMRcwFQYD VQQDEw53d3cuZ29vZ2xlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBHj B5fkcQxfYTjDVmvM4Jpr4RhjL+mH4yyk8lTvodX9BsFwTMwbaZ3AH7rPf9Pv6s3v M9CBGWcwDkVZbDXS4NSjggJCMIICPjAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAww CgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU3KP2XkzycUZRpFCY kYv8IO8pcEUwHwYDVR0jBBgwFoAUdb7Ed66J9kQ3fc+xaB8dGuvcNFkwWAYIKwYB BQUHAQEETDBKMCEGCCsGAQUFBzABhhVodHRwOi8vby5wa2kuZ29vZy93ZTIwJQYI KwYBBQUHMAKGGWh0dHA6Ly9pLnBraS5nb29nL3dlMi5jcnQwGQYDVR0RBBIwEIIO d3d3Lmdvb2dsZS5jb20wEwYDVR0gBAwwCjAIBgZngQwBAgEwNgYDVR0fBC8wLTAr oCmgJ4YlaHR0cDovL2MucGtpLmdvb2cvd2UyL3h1enQzUFU5Rl93LmNybDCCAQUG CisGAQQB1nkCBAIEgfYEgfMA8QB2AM8RVu7VLnyv84db2Wkum+kacWdKsBfsrAHS W3fOzDsIAAABleuhkB4AAAQDAEcwRQIhAMf3jwButHnFnHo1aUx9e+EbNsgP2WzC YyhM3o9H13J0AiAgLZv1kFt0po07tpllOvk/LAzx8RtO9l3IDHxs0q7AXQB3AKLj CuRF772tm3447Udnd1PXgluElNcrXhssxLlQpEfnAAABleuhk+MAAAQDAEgwRgIh AIu72/WhD+8tyuBXYyJ7sqUhTXuurs4MLJIqDcT2Y6USAiEA0Dmz78Ap+gPbnUhJ +UifxR8jQ2tBX7J27wfH6sbfl3YwCgYIKoZIzj0EAwIDRwAwRAIgZOShqs9njXez 5Wen/buqZWKZsXw57BPidSojHUJ5IhoCICRd5uCEGApzR5sG506AnVswrPKdMtiX H7RqdOGixbXu -----END CERTIFICATE----- Version # Version: 3 (0x2) All digital certificates use the X.509 version 3. The key addition to X.509 version 3 is the support for extensions. Version 3 was standardized in 1999 in RFC 2459, which is the precursor of RFC 5280.\nSerial Number # Serial Number: 02:71:83:d4:a8:25:79:07:0a:3d:8f:60:9e:27:cd:e5 The serial number uniquely identifies the certificate. CRLs (Certificate Revocation Lists) reference revoked certificates by serial number. Serial numbers are unique across all certificates issued by a CA.\nSignature Algorithm # Signature Algorithm: ecdsa-with-SHA256 The inner signature algorithm in the tbsCertificate data structure has the same value as the outer one. The inner signature algorithm is part of the signed data (to guarantee its integrity), while the outer one isn\u0026rsquo;t. When decoding a certificate, the signature of the raw tbsCertificate is verified before decoding it. This is why the signature algorithm must also be set outside of the tbsCertifiate.\nIssuer # Issuer: C = US, O = Google Trust Services, CN = WE2 The issuer holds the value of the subject field of the issuing CA certificate. It is used to Facilitate the construction of the certificate chain.\nThe following command downloads the issuing CA certificate and extracts its subject field.\n$ curl -s http://i.pki.goog/we2.crt | openssl x509 -inform DER -noout -subject subject=C = US, O = Google Trust Services, CN = WE2 Validity # Validity Not Before: Mar 31 08:56:27 2025 GMT Not After : Jun 23 08:56:26 2025 GMT The validity defines the timestamps between which the certificate is valid. The notBefore timestamp is usually backdated by a few minutes to ensure the certificate is recognized as immediately valid, even by machines not having an accurate clock. Refer to the page dedicated to certificate validities for more information.\nSubject # Subject: CN = www.google.com The subject is a is made of a sequence of key-value pairs. CN stands for commonName. This is where the domain name was historically set. The subject field is long deprecated for DV TLS web server leaf certificates. Nowadays, domain names are set in the Subject Alternative Name extension.\nModern clients should ignore the subject field of DV TLS web server leaf certificates. Some CAs still set it to ensure that very outdated clients (not aware that the Subject Alternative Name should be used instead) are still able to process the certificate.\nOV (Organization Validated), EV (Extended Validation) and QWAC (Qualified Web Authentication Certificate) certificates set additional key-value pairs in the subject field, like for example C= (countryName) or O= (organizationName).\nSubject Public Key Info # Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:11:e3:07:97:e4:71:0c:5f:61:38:c3:56:6b:cc: e0:9a:6b:e1:18:63:2f:e9:87:e3:2c:a4:f2:54:ef: a1:d5:fd:06:c1:70:4c:cc:1b:69:9d:c0:1f:ba:cf: 7f:d3:ef:ea:cd:ef:33:d0:81:19:67:30:0e:45:59: 6c:35:d2:e0:d4 ASN1 OID: prime256v1 NIST CURVE: P-256 The subject public key info carries the public key and identifies the algorithm with which the key is used.\nExtensions # Extensions may be marked as critical. Critical extensions must be processed by clients. Clients should refuse certificates having critical extensions they do not recognize.\nKey Usage # X509v3 Key Usage: critical Digital Signature The key usage extension defines the purpose of the key. The public key in the certificate is only used to verify signatures made using its corresponding private key. This is why \u0026ldquo;Digital Signature\u0026rdquo; is the only purpose of the key.\nExtended Key Usage # X509v3 Extended Key Usage: TLS Web Server Authentication The extended key usage extension indicates the purposes for which the certificate may be used. For website certificates, \u0026ldquo;TLS Web Server Authentication\u0026rdquo; (id-kp-serverAuth) must be set.\nBasic Constraints # X509v3 Basic Constraints: critical CA:FALSE The basic constraints extension indicates whether the certificate is a CA certificate. In a perfect world, this extensions shouldn\u0026rsquo;t need to be explicitly set to CA:FALSE in leaf certificates since this is the default value.\nBut, as demonstrated in this BlackHat talk from 2009, some clients may not validate certificate chains properly, so some CAs prefer to keep this extension to avoid introducing very nasty vulnerabilities in such clients.\nSubject Key Identifier # X509v3 Subject Key Identifier: DC:A3:F6:5E:4C:F2:71:46:51:A4:50:98:91:8B:FC:20:EF:29:70:45 The subject key identifier extension holds a value derived from the public key, usually by computing its hash.\nThis information is very important in CA certificates because it facilitates the construction of the certificate chain since all certificates must also include the \u0026ldquo;authority key identifier\u0026rdquo; extension.\nThis extension isn\u0026rsquo;t strictly needed in leaf certificates since it isn\u0026rsquo;t used to validate the certificate chain. One reason to include it anyway is to easily find all certificates bound to the same public key.\nAuthority Key Identifier # X509v3 Authority Key Identifier: 75:BE:C4:77:AE:89:F6:44:37:7D:CF:B1:68:1F:1D:1A:EB:DC:34:59 The authority key identifier extension references the subject key identifier of the issuing CA certificate. It is used to facilitate the construction of the certificate chain.\nThe following command downloads the issuing CA certificate and extracts its subject key identifier extension.\n$ curl -s http://i.pki.goog/we2.crt | openssl x509 -inform DER -noout -ext subjectKeyIdentifier X509v3 Subject Key Identifier: 75:BE:C4:77:AE:89:F6:44:37:7D:CF:B1:68:1F:1D:1A:EB:DC:34:59 Authority Information Access # Authority Information Access: OCSP - URI:http://o.pki.goog/we2 CA Issuers - URI:http://i.pki.goog/we2.crt The authority information access (AIA) extension indicates how to access information and services for the issuer of the certificate. Here the extension holds two URLs:\nThe OCSP (Online Certificate Status Protocol) URL used to check whether the certificate is revoked. Note that OCSP is being deprecated. The URL to download the issuing CA certificate. Note that clients should not rely on it to build the certificate chain since the issuing CA certificate may have been cross-signed. Instead, websites should serve the full certificate chain to their visitors. Subject Alternative Name # X509v3 Subject Alternative Name: DNS:www.google.com The subject alternative name (SAN) extension lists all identifiers (domain names and IP addresses) for which this certificate can be used.\nCertificate Policies # X509v3 Certificate Policies: Policy: 2.23.140.1.2.1 The certificatePolicies indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used. The OID (Object Identifier) 2.23.140.1.2.1 signifies \u0026ldquo;CA/B Forum DV (Domain Validated) Certificate\u0026rdquo;.\nCRL Distribution Points # X509v3 CRL Distribution Points: Full Name: URI:http://c.pki.goog/we2/xuzt3PU9F_w.crl The CRL distribution points extension references the URL of the CRL (Certificate Revocation List) for that certificate. CRLs lists all revoked certificates by a CA. To limit the file size in case many certificates are revoked, some CAs partition their CRLs in multiple files.\nIf the certificate is revoked, it will appear on the linked CRL file.\nCT Precertificate SCTs # CT Precertificate SCTs: Signed Certificate Timestamp: Version : v1 (0x0) Log ID : CF:11:56:EE:D5:2E:7C:AF:F3:87:5B:D9:69:2E:9B:E9: 1A:71:67:4A:B0:17:EC:AC:01:D2:5B:77:CE:CC:3B:08 Timestamp : Mar 31 09:56:28.830 2025 GMT Extensions: none Signature : ecdsa-with-SHA256 30:45:02:21:00:C7:F7:8F:00:6E:B4:79:C5:9C:7A:35: 69:4C:7D:7B:E1:1B:36:C8:0F:D9:6C:C2:63:28:4C:DE: 8F:47:D7:72:74:02:20:20:2D:9B:F5:90:5B:74:A6:8D: 3B:B6:99:65:3A:F9:3F:2C:0C:F1:F1:1B:4E:F6:5D:C8: 0C:7C:6C:D2:AE:C0:5D Signed Certificate Timestamp: Version : v1 (0x0) Log ID : A2:E3:0A:E4:45:EF:BD:AD:9B:7E:38:ED:47:67:77:53: D7:82:5B:84:94:D7:2B:5E:1B:2C:C4:B9:50:A4:47:E7 Timestamp : Mar 31 09:56:29.795 2025 GMT Extensions: none Signature : ecdsa-with-SHA256 30:46:02:21:00:8B:BB:DB:F5:A1:0F:EF:2D:CA:E0:57: 63:22:7B:B2:A5:21:4D:7B:AE:AE:CE:0C:2C:92:2A:0D: C4:F6:63:A5:12:02:21:00:D0:39:B3:EF:C0:29:FA:03: DB:9D:48:49:F9:48:9F:C5:1F:23:43:6B:41:5F:B2:76: EF:07:C7:EA:C6:DF:97:76 SCTs (Signed Certificate Timestamps) are promises from CT (Certificate Transparency) logs to include the (pre)certificate. These are SCTs from \u0026ldquo;Google 'Xenon2025h1' log\u0026rdquo; and \u0026ldquo;Let's Encrypt 'Oak2025h1'\u0026rdquo;, respectively. We can verify that by converting the hex-encoded Log ID to base64 and looking for that \u0026ldquo;log_id\u0026rdquo; in https://www.gstatic.com/ct/log_list/v3/log_list.json.\nSee the page dedicated to Certificate Transparency for more information.\nEncoding # Certificates are ASN.1 data structures. Certificates are generally encoded using either DER (Distinguished Encoding Rules) or PEM (Privacy-Enhanced Mail).\nDER is an unambiguous (as opposed to BER (Basic Encoding Rules)) binary encoding format for representing ASN.1 data structures as a sequence of bytes.\nPEM is a text-based encoding format, which is essentially a wrapper around the DER encoding, making it suitable for transmission in text-based systems (like email, as its name suggests) and for easy copy-pasting. PEM certificates are made of:\nA \u0026ldquo;-----BEGIN CERTIFICATE-----\u0026rdquo; header line. The DER-encoded certificate data, converted to base64. A \u0026ldquo;-----END CERTIFICATE-----\u0026rdquo; footer line. You can take the base64 DER-encoded certificate data and decode it using an ASN.1 decoder such as https://lapo.it/asn1js/ (example).\n"},{"id":4,"href":"/acme/overview/","title":"Overview","section":"The ACME Protocol","content":" ACME Overview # ACME allows clients to trigger certificate management actions using a set of JSON messages. Issuance using ACME resembles a traditional CA\u0026rsquo;s issuance process, in which a client:\nCreates an account. Initiates an order for a certificate to be issued. Proves control of all identifiers (domain names, IP addresses, etc.) requested to be included in the certificate. Finalizes the order by submitting a CSR (Certificate Signing Request). Awaits issuance and downloads the issued certificate along with the corresponding chain(s). This pages introduces the most important concepts and provides a high-level explanation of the ACME protocol. Refer to RFC 8555 for additional information.\nDirectory URL # Since ACME is a standardized protocol, any ACME client can request certificates from any ACME CA (Certificate Authority). The client only needs to configure one thing: the ACME Directory URL.\nThe ACME Directory URL returns everything the client needs to know to interact with the ACME CA. For example, Google Trust Services\u0026rsquo; ACME Directory URL is https://dv.acme-v02.api.pki.goog/directory. Here is the response from an HTTP GET request to that URL.\n{ \u0026#34;newNonce\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/new-nonce\u0026#34;, \u0026#34;newAccount\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/new-account\u0026#34;, \u0026#34;newOrder\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/new-order\u0026#34;, \u0026#34;newAuthz\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/new-authz\u0026#34;, \u0026#34;revokeCert\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/revoke-cert\u0026#34;, \u0026#34;keyChange\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/key-change\u0026#34;, \u0026#34;renewalInfo\u0026#34;: \u0026#34;https://dv.acme-v02.api.pki.goog/renewal-info\u0026#34;, \u0026#34;meta\u0026#34;: { \u0026#34;termsOfService\u0026#34;: \u0026#34;https://pki.goog/GTS-SA.pdf\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://pki.goog\u0026#34;, \u0026#34;caaIdentities\u0026#34;: [\u0026#34;pki.goog\u0026#34;], \u0026#34;externalAccountRequired\u0026#34;: true } } The returned JSON object lists URLs for various certificate management actions, such as creating a new account (newAccount) or initiating a new order (newOrder). The JSON object also holds metadata that links to various resources, specifies the CAA identities that the CA recognizes as referring to itself, and indicates whether an existing account in a non-ACME system is required for creating an ACME account.\nAccount # Before creating a new ACME account, the client must generate an asymmetric key pair. The client uses the generated ACME account private key to authenticate themselves by signing all messages sent to the CA. There is no username, the key pair suffices. See Request Protection below.\nNew ACME accounts are created by sending an HTTP POST request to the newAccount URL. The previously generated ACME account public key must be set in the jwk (JSON Web Key) field of the request\u0026rsquo;s JWS (JSON Web Signature). The CA will use it to authenticate future requests from that account.\nWhen creating a new account, the client must set termsOfServiceAgreed to true in the request. This attests that they read and agree to the terms of service linked from meta.termsOfService in the JSON object returned by the ACME Directory URL.\nClients can also provide a contact URL, usually a mailto: email address, that the CA can use to notify them about upcoming certificates expiries, upcoming certificate revocations caused by external factors, or Certificate Problem Reports received by the CA. Note that Let\u0026rsquo;s Encrypt stopped sending expiry notification emails in 2025 and ARI (ACME Renewal Information) should be used instead to automatically know when certificates should be renewed and proactively renew them if they are going to be affected by upcoming revocations caused by external factors.\nFinally, if meta.externalAccountRequired is true in the JSON object returned by the ACME Directory URL, the newAccount request must include the externalAccountBinding field. This is used to associate the ACME account with an existing account in a non-ACME system, such as a CA customer database. The value of the externalAccountBinding field is described in RFC 8555. The important thing is that its value depends on a MAC (Message Authentication Code) key and a key identifier which must both be previously provided by the CA using a mechanism outside of ACME. See the page dedicated to External Account Binding for more information.\nClick here to view an example newAccount request. POST /acme/new-account HTTP/1.1 Host: example.com Content-Type: application/jose+json The request body below is not valid JSON since it includes base64url() function calls and some values are truncated. It intends to show how the values of the JSON object are computed.\n{ \u0026#34;protected\u0026#34;: base64url({ \u0026#34;alg\u0026#34;: \u0026#34;ES256\u0026#34;, \u0026#34;jwk\u0026#34;: {...}, \u0026#34;nonce\u0026#34;: \u0026#34;6S8IqOGY7eL2lsGoTZYifg\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://example.com/acme/new-account\u0026#34; }), \u0026#34;payload\u0026#34;: base64url({ \u0026#34;termsOfServiceAgreed\u0026#34;: true, \u0026#34;contact\u0026#34;: [ \u0026#34;mailto:cert-admin@example.org\u0026#34;, \u0026#34;mailto:admin@example.org\u0026#34; ] }), \u0026#34;signature\u0026#34;: \u0026#34;RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I\u0026#34; } Request Protection # Most ACME requests:\nMust have a JSON body signed using the ACME account private key. Must have a \u0026ldquo;kid\u0026rdquo; (Key ID) field which references the ACME account URL to which the key is bound. Must use the HTTP POST method since HTTP GET requests can\u0026rsquo;t have a body. Must include an unpredictable nonce to protect against replay attacks. Must include a \u0026ldquo;url\u0026rdquo; field (part of the signed JSON body) which specifies the URL to which the request is directed to protect against compromised CDNs (Content Delivery Networks). Must have the Content-Type HTTP header field set to \u0026ldquo;application/jose+json\u0026rdquo;. These requirements ensure that all requests that must be restricted to only a specific ACME account are authenticated appropriately. The CA maintains a list of nonces that it has issued, and it requires any signed request from clients to carry such a nonce. Clients can get fresh nonces from the Replay-Nonce HTTP header included in all responses from the CA or by sending an HTTP HEAD request to the newNonce URL.\nTo fetch resources (which would otherwise be done using the HTTP GET method), clients must send HTTP POST requests with a JWS (JSON Web Signature) body having the payload field set to the empty string (\u0026quot;\u0026quot;). Such requests are referred to as \u0026ldquo;POST-as-GET\u0026rdquo; requests.\nThere are a few exceptions to these rules. For example, the Directory URL can be fetched using a simple HTTP GET request, or revokeCert requests can be signed using the certificate private key instead of the account private key.\nOrder Initiation # New certificate orders are created by sending an HTTP POST request to the newOrder URL. The JSON body of the request must include the identifiers (domain names and IP addresses) that the client wishes to include in the certificate and, optionally, the notBefore/notAfter timestamps that determine the certificate\u0026rsquo;s validity. If they aren\u0026rsquo;t set, the CA sets sane default values instead. See the page dedicated to certificate lifetimes for more information.\nIf the CA is willing to issue the requested certificate, it responds with a 201 (Created) HTTP status. The JSON body of the response contains the URL of all authorizations the client must complete before the certificate can be issued. The client must send POST-as-GET requests to the indicated URLs to fetch detailed information about the authorization resources tied to the order.\nSee the Domain Control Validation section below to understand how authorizations can be completed.\nClick here to view an example newOrder response. HTTP/1.1 201 Created Replay-Nonce: MYAuvOpaoIiywTezizk5vw Link: \u0026lt;https://example.com/acme/directory\u0026gt;;rel=\u0026#34;index\u0026#34; Location: https://example.com/acme/order/TOlocE8rfgo { \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;expires\u0026#34;: \u0026#34;2025-05-05T14:09:07.99Z\u0026#34;, \u0026#34;notBefore\u0026#34;: \u0026#34;2025-05-01T00:00:00Z\u0026#34;, \u0026#34;notAfter\u0026#34;: \u0026#34;2025-05-07T23:59:59Z\u0026#34;, \u0026#34;identifiers\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;www.example.org\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;example.org\u0026#34; } ], \u0026#34;authorizations\u0026#34;: [ \u0026#34;https://example.com/acme/authz/PAniVnsZcis\u0026#34;, \u0026#34;https://example.com/acme/authz/r4HqLzrSrpI\u0026#34; ], \u0026#34;finalize\u0026#34;: \u0026#34;https://example.com/acme/order/TOlocE8rfgo/finalize\u0026#34; } Click here to view an example authorization resource. HTTP/1.1 200 OK Content-Type: application/json Link: \u0026lt;https://example.com/acme/directory\u0026gt;;rel=\u0026#34;index\u0026#34; { \u0026#34;status\u0026#34;: \u0026#34;pending\u0026#34;, \u0026#34;expires\u0026#34;: \u0026#34;2025-05-02T14:09:30Z\u0026#34;, \u0026#34;identifier\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;www.example.org\u0026#34; }, \u0026#34;challenges\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;http-01\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://example.com/acme/chall/prV_B7yEyA4\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;DGyRejmCefe7v4NfDGDKfA\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;dns-01\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://example.com/acme/chall/Rg5dV14Gh1Q\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;DGyRejmCefe7v4NfDGDKfA\u0026#34; } ] } There is another (less common) flow to initiate certificate issuances. It is called the \u0026ldquo;pre-authorization\u0026rdquo; flow. It consists of first sending an HTTP POST request to the newAuthz URL (new authorization) for all identifiers the client wishes to include in the certificate, then completing all authorizations (see the Domain Control Validation section below), and finally initiating a newOrder, without having to reactively complete the corresponding authorizations since they have all been pre-authorized.\nDCV (Domain Control Validation) # Domain Control Validation, despite its name, applies to both domain names and IP addresses.\nAn authorization with status \u0026ldquo;valid\u0026rdquo; signifies that the tied ACME account is authorized to manage certificates for a given identifier (domain name or IP address). To complete an authorization, the client must complete the DCV (Domain Control Validation) process to prove that they control the identifier in question.\nEach authorization has multiple associated challenges, each with a different type. To complete an authorization, the client must solve one of them (the client gets to choose the one they prefer). The most common challenge types are dns-01 and http-01. They require the client to publish a value derived from a token provided by the CA to an agreed upon URL via DNS or HTTP, respectively. It is assumed that the value at the agreed upon URL can only be updated by someone who legitimately controls the identifier.\nThe client must send an HTTP POST request with an empty JSON body (\u0026quot;{}\u0026quot;) to the challenge URL (not the authorization URL) once they are ready for CA to validate a challenge. Upon receiving this request, the CA retrieves content from the agreed upon URL (via DNS or HTTP) and verifies that the fetched data matches the expected value.\nTo mitigate hijacking attacks, CAs perform the challenge validation from multiple vantage points worldwide. Refer to the page dedicated to MPIC (Multi-Perspective Issuance Corroboration) for more information.\nUsually, the validation process takes some time, so the client needs to regularly poll the authorization URL to know when it is completed. Once validated, an authorization can be reused for future certificate issuances (for a limited period of time). In other words, the client doesn\u0026rsquo;t always have to prove they control an identifier when requesting new certificates for the same domain name.\nOrder Finalization and Issuance # Once all authorizations from an order are \u0026ldquo;valid\u0026rdquo;, the order transitions to the \u0026ldquo;ready\u0026rdquo; state. Newly created orders may immediately be in a \u0026ldquo;ready\u0026rdquo; state if all their identifiers were previously authorized.\nOrders are finalized by sending an HTTP POST request to the finalize URL found in the JSON object returned by newOrder. This request must only be sent once all corresponding authorizations have been completed.\nThe request JSON body must include a CSR (Certificate Signing Request) for the certificate being requested. The CSR must indicate the exact same set of identifiers as the initial newOrder request. Generally, the CA only extracts the public key from the CSR and ignores all other attributes and extensions.\nBefore issuing the certificate, the CA verifies CAA records to ensure that it is authorized to issue a certificate for the requested identifiers.\nOnce all validations pass, the CA issues the certificate including all requested (and validated) identifiers. To issue the certificate, the CA builds and populates a data structure called a tbsCertificate (to be signed certificate) and signs it using an intermediate CA private key. The tbsCertificate contains the requested identifiers, the public key from the CSR, notBefore/notAfter validity timestamps, SCTs (Signed Certificate Timestamps), and other attributes required to validate the authenticity of the certificate. See the page dedicated to the anatomy of certificates for more information.\nThe CA then respond with a 200 (OK) HTTP status. The JSON body of the response contains an updated order object having its status set to \u0026ldquo;valid\u0026rdquo; and a new \u0026ldquo;certificate\u0026rdquo; field that holds the URL for downloading the issued certificate.\nTo download the issued certificate, the client simply sends an HTTP POST-as-GET request to the certificate URL with the Accept HTTP header set to \u0026ldquo;application/pem-certificate-chain\u0026rdquo;. The response from the CA is a series of PEM-encoded certificates, starting with the newly issued certificate, followed by one or more CA certificates necessary to build the chain, without including the self-signed root CA certificate (a.k.a. \u0026ldquo;trust anchor\u0026rdquo;).\nClick here to view an example certificate response. HTTP/1.1 200 OK Content-Type: application/pem-certificate-chain Link: \u0026lt;https://example.com/acme/directory\u0026gt;;rel=\u0026#34;index\u0026#34; -----BEGIN CERTIFICATE----- MIIDlTCCAzygAwIBAgIQAnGD1KgleQcKPY9gnifN5TAKBggqhkjOPQQDAjA7MQsw CQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMQwwCgYD VQQDEwNXRTIwHhcNMjUwMzMxMDg1NjI3WhcNMjUwNjIzMDg1NjI2WjAZMRcwFQYD VQQDEw53d3cuZ29vZ2xlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBHj B5fkcQxfYTjDVmvM4Jpr4RhjL+mH4yyk8lTvodX9BsFwTMwbaZ3AH7rPf9Pv6s3v M9CBGWcwDkVZbDXS4NSjggJCMIICPjAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAww CgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQU3KP2XkzycUZRpFCY kYv8IO8pcEUwHwYDVR0jBBgwFoAUdb7Ed66J9kQ3fc+xaB8dGuvcNFkwWAYIKwYB BQUHAQEETDBKMCEGCCsGAQUFBzABhhVodHRwOi8vby5wa2kuZ29vZy93ZTIwJQYI KwYBBQUHMAKGGWh0dHA6Ly9pLnBraS5nb29nL3dlMi5jcnQwGQYDVR0RBBIwEIIO d3d3Lmdvb2dsZS5jb20wEwYDVR0gBAwwCjAIBgZngQwBAgEwNgYDVR0fBC8wLTAr oCmgJ4YlaHR0cDovL2MucGtpLmdvb2cvd2UyL3h1enQzUFU5Rl93LmNybDCCAQUG CisGAQQB1nkCBAIEgfYEgfMA8QB2AM8RVu7VLnyv84db2Wkum+kacWdKsBfsrAHS W3fOzDsIAAABleuhkB4AAAQDAEcwRQIhAMf3jwButHnFnHo1aUx9e+EbNsgP2WzC YyhM3o9H13J0AiAgLZv1kFt0po07tpllOvk/LAzx8RtO9l3IDHxs0q7AXQB3AKLj CuRF772tm3447Udnd1PXgluElNcrXhssxLlQpEfnAAABleuhk+MAAAQDAEgwRgIh AIu72/WhD+8tyuBXYyJ7sqUhTXuurs4MLJIqDcT2Y6USAiEA0Dmz78Ap+gPbnUhJ +UifxR8jQ2tBX7J27wfH6sbfl3YwCgYIKoZIzj0EAwIDRwAwRAIgZOShqs9njXez 5Wen/buqZWKZsXw57BPidSojHUJ5IhoCICRd5uCEGApzR5sG506AnVswrPKdMtiX H7RqdOGixbXu -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIICnjCCAiWgAwIBAgIQf/Mta0CdFdWWWwWHOnxy4DAKBggqhkjOPQQDAzBHMQsw CQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEU MBIGA1UEAxMLR1RTIFJvb3QgUjQwHhcNMjMxMjEzMDkwMDAwWhcNMjkwMjIwMTQw MDAwWjA7MQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZp Y2VzMQwwCgYDVQQDEwNXRTIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQ1fh/y FO2QfeGeKjRDhsHVlugncN+eBMupyoZ5CwhNRorCdKS72b/u/SPXOPNL71QX4b7n ylUlqAwwrC1dTqFRo4H+MIH7MA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggr BgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU db7Ed66J9kQ3fc+xaB8dGuvcNFkwHwYDVR0jBBgwFoAUgEzW63T/STaj1dj8tT7F avCUHYwwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzAChhhodHRwOi8vaS5wa2ku Z29vZy9yNC5jcnQwKwYDVR0fBCQwIjAgoB6gHIYaaHR0cDovL2MucGtpLmdvb2cv ci9yNC5jcmwwEwYDVR0gBAwwCjAIBgZngQwBAgEwCgYIKoZIzj0EAwMDZwAwZAIw C724NlXINaPS2X05c9P394K4CdGBb+VkRdveqsAORRKPrJPoH2DsLn5ELCKUkeys AjAv3wyQdkwtaWHVT/2YmBiE2zTqmOybzYhi/9Jl5TNqmgztI0k4L1G/kdASosk4 ONo= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIDejCCAmKgAwIBAgIQf+UwvzMTQ77dghYQST2KGzANBgkqhkiG9w0BAQsFADBX MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEQMA4GA1UE CxMHUm9vdCBDQTEbMBkGA1UEAxMSR2xvYmFsU2lnbiBSb290IENBMB4XDTIzMTEx NTAzNDMyMVoXDTI4MDEyODAwMDA0MlowRzELMAkGA1UEBhMCVVMxIjAgBgNVBAoT GUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxFDASBgNVBAMTC0dUUyBSb290IFI0 MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE83Rzp2iLYK5DuDXFgTB7S0md+8Fhzube Rr1r1WEYNa5A3XP3iZEwWus87oV8okB2O6nGuEfYKueSkWpz6bFyOZ8pn6KY019e WIZlD6GEZQbR3IvJx3PIjGov5cSr0R2Ko4H/MIH8MA4GA1UdDwEB/wQEAwIBhjAd BgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDwYDVR0TAQH/BAUwAwEB/zAd BgNVHQ4EFgQUgEzW63T/STaj1dj8tT7FavCUHYwwHwYDVR0jBBgwFoAUYHtmGkUN l8qJUC99BM00qP/8/UswNgYIKwYBBQUHAQEEKjAoMCYGCCsGAQUFBzAChhpodHRw Oi8vaS5wa2kuZ29vZy9nc3IxLmNydDAtBgNVHR8EJjAkMCKgIKAehhxodHRwOi8v Yy5wa2kuZ29vZy9yL2dzcjEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMA0GCSqG SIb3DQEBCwUAA4IBAQAYQrsPBtYDh5bjP2OBDwmkoWhIDDkic574y04tfzHpn+cJ odI2D4SseesQ6bDrarZ7C30ddLibZatoKiws3UL9xnELz4ct92vID24FfVbiI1hY +SW6FoVHkNeWIP0GCbaM4C6uVdF5dTUsMVs/ZbzNnIdCp5Gxmx5ejvEau8otR/Cs kGN+hr/W5GvT1tMBjgWKZ1i4//emhA1JG1BbPzoLJQvyEotc03lXjTaCzv8mEbep 8RqZ7a2CPsgRbuvTPBwcOMBBmuFeU88+FSBX6+7iP0il8b4Z0QFqIwwMHfs/L6K1 vepuoxtGzi4CZ68zJpiq1UvSqTbFJjtbD4seiMHl -----END CERTIFICATE----- The TLS protocol requires servers to serve certificates which form a chain of trust leading from the TLS web server certificate to a trust anchor. This is why the site for which the certificate just got issued must serve this whole certificate chain to its visitors when establishing HTTPS connections (and not just the newly issued TLS web server certificate).\nThe response from the CA may also include a Link HTTP header with rel=\u0026quot;alternate\u0026quot; pointing to alternative certificate chains (including cross-signed CA certificates) starting with the same TLS web server certificate and ending with different trust anchors. Clients can fetch these alternate chains and use their own heuristics (e.g. the lightest, the most compatible, etc.) to decide which one to serve to visitors of their site.\nA certificate resource represents a single, immutable certificate. To renew a certificate, the client must initiate a new order.\nRemember that certificates are based on asymmetric cryptography. Certificates only include the public key. The private key must not be shared with anyone, not even the CA who issues the certificate.\nRevocation # Certificates are normally valid between their notBefore and notAfter timestamps. There may be (security, business, compliance, etc.) reasons to invalidate a certificate before its notAfter timestamp. This is what revocation is for.\nCertificates can be revoked by sending an HTTP POST request to the revokeCert URL. The JSON body of the request must include the certificate to revoke and can optionally include the desired revocation reasonCode.\nRevocation requests are different from other ACME requests in that they can be signed with either an account key pair or the key pair in the certificate (in which case the client doesn\u0026rsquo;t need to have an ACME account registered with the CA).\nThere are 3 ways to be authorized to revoke certificates via ACME:\nBy signing the revocation request using the private key of the ACME account used to issue the certificate (in which case the client is assumed to be the one who requested the certificate in the first place). By signing the revocation request using the certificate private key (in which case the client is either the one who requested the certificate, or the certificate private key is compromised, and it must be revoked anyway). By signing the revocation request using the private key of an ACME account that holds \u0026ldquo;valid\u0026rdquo; authorizations for all the identifiers in the certificate (in which case the client is the legitimate owner of all identifiers included in the certificate). "},{"id":5,"href":"/webpki/cert-lifetime/","title":"Certificate Lifetime","section":"The WebPKI","content":" Certificate Lifetime # The maximal allowed validity of certificates is set by (continuously evolving) WebPKI requirements that all publicly trusted CAs must comply with. Here is the evolution of the maximal allowed validity of TLS web server certificates.\nIn 2012, it was set to 60 months (5 years). In 2015, it was reduced to 39 months (3 years and 3 months). In 2018, it went down to 825 days (a bit more than 2 years). In 2021, it was reduced further to 398 days (1 year and 1 month). In 2025, a plan (ballot SC-081) to gradually reduce the maximal allowed validity was endorsed by all major web browsers and most publicly trusted CAs as follows: In 2026, it will be reduced to 200 days (to allow for a half-yearly renewal cadence) In 2027, it will be reduced to 100 days (to allow for a quarterly renewal cadence) In 2029, it will be reduced to 47 days (to allow for a monthly renewal cadence) Google Trust Services and Let\u0026rsquo;s Encrypt have always set the maximal validity of their certificates below 100 days, as shown by this article published in 2015 by Let\u0026rsquo;s Encrypt.\nWhy Is It Shrinking ? # There are many reasons for reducing the maximal allowed validity of certificates:\nCertificates represent a point in time state of reality, which may diverge over time. For instance, domain owners can legitimately request certificates with maximal validity 1 day prior their domain name registration expires. See https://insecure.design/, which explains this problem in depth. To increase the agility of clients by forcing them to automate their certificate lifecycle management. Even if this is an existing expectation, history has shown that too many clients lack the ability to quickly rotate their certificates in case of emergency such as the Heartbleed vulnerability or mandated revocations. To reduce reliance on certificate revocation, which is imperfect ([1], [2]). Web browsers implemented mechanisms such as CRLSets and CRLite to work around the limitations of certificates revocation, but these mechanisms only solve the problem for web browsers. Other certificate consumers are still subject to the imperfections of certificate revocations. Some clients don\u0026rsquo;t even check the revocation status of certificates! To facilitate the swift deprecation of obsolete cryptographic algorithms. The lengthy process of phasing out SHA-1 highlighted the need for a more agile ecosystem. This urgency is amplified by the emergence of quantum computers, which threaten to render the cryptographic algorithms currently used in certificates obsolete. To transition inappropriate use cases to private CAs. Too many systems use publicly trusted certificates because it is easy, and not because they actually need publicly trusted certificates. Since these systems often lack quick update capabilities, they are slowing down innovations in the WebPKI. Changes and improvements are hard to introduce because they risk breaking such ossified systems who would be better served by private CAs. The validity of certificates is not shrinking to enable CAs to make more money by selling more certificates. If they haven\u0026rsquo;t already, CAs will have to adapt their pricing models to offer a subscription program with unlimited certificates for the paid time period. If they don\u0026rsquo;t, they will lose their customers to competitors or free CAs such as Google Trust Services and Let\u0026rsquo;s Encrypt.\nWhat is in Scope ? # The timeline for reducing the maximal allowed validity of certificates described on this page only affects publicly trusted TLS web server certificates. Other certificate types, such as code signing, document signing, or email protection certificates are not subject to the same timeline, but note that they may each have their own timeline for reducing the maximal allowed certificate validity.\nThe DCV (Domain Control Validation) reuse periods are also being reduced. By 2029, valid authorizations for domain names will only be reusable for 10 days. Passed that delay, certificate applicants will have to prove again that they control the domains in question when requesting new certificates.\nOther reuse periods specific to OV, EV, or QWAC certificates are not affected. When requesting such certificates, applicants will have to frequently prove that they control each domain name, but they won\u0026rsquo;t have to prove as frequently that the legal entity who owns a domain name is still the same/still exists.\nPrivate CAs are not affected since they do not have to comply with the WebPKI requirements.\nWhat Should I Do ? # You must automate your certificate lifecycle management using ACME or other automation methods supported by your CA. The maximal allowed validity is shrinking gradually to give enough time to certificate consumers to automate their certificate lifecycle management. Get ahead of the wave and do it now!\nIf automation is not possible, ask yourself whether you really need publicly trusted certificates. In general, publicly trusted certificates are only needed for public-facing websites exposed to the Internet since their visitors are very diverse/unknown. Internal websites can use certificates issued by private CAs since it should be possible to distribute the private CA certificate in the trust store of all their visitors.\nClient authentication certificates must also migrate to private CAs ! Publicly trusted WebPKI certificates are only for servers. The Chrome Root Store Policy already announced that publicly trusted CAs will be forbidden to issue clientAuth certificates in 2026.\nIt is now easier than ever to spin up private CAs using Google Cloud\u0026rsquo;s Certificate Authority Service for example, or by partnering with security vendors that can manage private CAs for you.\nIf you operate appliances that don\u0026rsquo;t support automation, pressure your vendors to add support for it. If they don\u0026rsquo;t, they will loose all their customers since the lifetime reduction is enforced by all publicly trusted CAs. Alternatively, install a reverse HTTPS proxy which supports certificate automation in front of legacy systems. See Getting started with ACME for guidance.\nIf your CA doesn\u0026rsquo;t support any automation method, leave them. For the record, the Chrome Root Store Policy requires all new CAs to support automation. This requirement will eventually be enforced for all CAs.\nShort-lived Certificates # Short-lived certificates are valid for less than 7 days (or 10 days if they were issued before 2026-03-15). Short-lived certificates don\u0026rsquo;t have to be revocable. Since revocation is imperfect, status information can take days to become globally consistent when certificates are revoked. Some clients even forget to query the revocation status of certificates. Short-lived certificates solve this problem since they are guaranteed to become invalid after just a few days.\nLet\u0026rsquo;s Encrypt announced support for short-lived certificates and declared that these certificates will also support IP addresses in addition to domain names.\n"},{"id":6,"href":"/acme/challenges/","title":"Challenge Types","section":"The ACME Protocol","content":"DO NOT SUBMIT Talk about MPIC.\nACME Challenge Types # ACME challenges provide the CA with assurance that certificate requesters control the identifiers (domain name or IP address) requested to be included in the to be issued certificate. To successfully complete a challenge, clients must both prove that they control the identifiers in question and that they hold the private key of the account key pair used to respond to the challenges.\nACME challenges typically require the client to set up some network accessible resource that the CA can query (via DNS or HTTP) from multiple vantage points worldwide in order to validate that the client controls an identifier. Once the challenge is validated, the client should de-provision the resource.\nIf the CA queries the resource too early, for example before the information had time to propagate globally, the validation may fail. This is why clients should only ask the CA to validate challenges once they believe the request will succeed. This is particularly important since some CAs do not retry failed challenge validations!\nMost ACME challenges make use of a \u0026ldquo;key authorization string\u0026rdquo;. This string concatenates the token for the challenge with a key fingerprint, separated by a \u0026ldquo;.\u0026rdquo; character\nkeyAuthorization = token || \u0026#39;.\u0026#39; || base64url(sha256(accountKey)) http-01 # The http-01 challenge type requires the client to provision a file, with a specific string as its content, at a specific path on a web server. The file must be available over HTTP, and not just HTTPS.\nThe URL at which the file must be provisioned is http://{domain}/.well-known/acme-challenge/{token}. Its content must be the ASCII representation of the key authorization.\nSee RFC 8555 and the excellent summary from Let\u0026rsquo;s Encrypt for more information about the http-01 challenge type and its pros/cons.\ndns-01 # The dns-01 challenge type requires to provision a TXT resource record containing a designated value on DNS. The value is the SHA-256 digest of the key authorization, and the validation record name is _acme-challenge.{domain}.\nThe dns-01 challenge type can be used to issue certificates containing wildcard domain names.\nSee RFC 8555 and the excellent summary from Let\u0026rsquo;s Encrypt for more information about the dns-01 challenge type and its pros/cons.\ndns-account-01 # The dns-account-01 challenge type is almost the same as dns-01. The main difference is that the validation record name is not _acme-challenge.{domain}. Instead, it contains a value derived from the ACME account key.\nThe dns-account-01 challenge type enables multiple independent systems to authorize a single domain name concurrently by using a unique label per ACME account as DNS validation record name, dns-account-01 avoids CNAME delegation conflicts inherent to the dns-01 challenge type. This is particularly valuable for multi-region or multi-cloud deployments that wish to rely upon DNS-based domain control validation and need to independently obtain certificates for the same domain.\nSee the draft RFC for more information\ntls-alpn-01 # The tls-alpn-01 challenge type requires to construct a self-signed certificate containing a designed value, and serving it to clients negotiating the \u0026ldquo;acme-tls/1\u0026rdquo; application-layer protocol in the ALPN (Application Layer Protocol Negotiation) extension during the TLS handshake when connecting to TCP port 443.\nThe self-signed certificate must contain the domain name being validated as a dnsName in the subjectAlternativeName X.509 extension, and it must include the acmeIdentifier extension which contains the SHA-256 digest of the key authorization.\nSee RFC 8737 and the excellent summary from Let\u0026rsquo;s Encrypt for more information about the tls-alpn-01 challenge type and its pros/cons.\n"},{"id":7,"href":"/webpki/caa/","title":"CAA (Certificate Authority Authorization)","section":"The WebPKI","content":" CAA (Certificate Authority Authorization) # Talk about the default assumptions for issue and issuewild, which are different. Look at the GTS incident for a good narrative.\n"},{"id":8,"href":"/acme/eab/","title":"EAB (External Account Binding)","section":"The ACME Protocol","content":" EAB (External Account Binding) # "},{"id":9,"href":"/acme/ari/","title":"ARI (ACME Renewal Information)","section":"The ACME Protocol","content":" ARI (ACME Renewal Information) # "},{"id":10,"href":"/webpki/mpic/","title":"MPIC (Multi-Perspective Issuance Corroboration)","section":"The WebPKI","content":" MPIC (Multi-Perspective Issuance Corroboration) # https://security.googleblog.com/2025/03/new-security-requirements-adopted-by.html\n"},{"id":11,"href":"/webpki/ct/","title":"CT (Certificate Transparency)","section":"The WebPKI","content":" CT (Certificate Transparency) # precertificate and poison extension.\n"}]